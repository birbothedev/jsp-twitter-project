
package yapspace.controllers;
import yapspace.models.UserModel;
import yapspace.User;
import yapspace.models.FollowingModel;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import yapspace.Post;
import yapspace.models.PostModel;


public class Profile extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ensure user is logged in before proceeding
        if (!Login.ensureLoggedIn(request)){
            request.setAttribute("message", "you must login");
            response.sendRedirect("Login");
            return;
        }
        
        // get the session object without creating a new session (set getSession to false)
        HttpSession session = request.getSession(false);
        User sessionUser = (User) session.getAttribute("user");
        
        // get the username of the profile we are currently viewing, not the logged in user's profile
        String profileUsername = request.getParameter("username");
        if (profileUsername == null || profileUsername.isEmpty()) {
            System.out.println("No username parameter found, using session user.");
            profileUsername = sessionUser.getUsername();  
        } else {
            System.out.println("Profile i am looking at: " + profileUsername);
        }

        // get the user of the profile we are looking at from the users table by using the username
        User user = UserModel.getUser(profileUsername);
        if (user == null) {
            request.setAttribute("message", "User not found.");
            request.getRequestDispatcher("/views/error.jsp").forward(request, response);
            return;
        }
        
        // get each post image as an array of bytes
        // this code generated by google search
        byte[] profileImage = UserModel.getProfileImage(profileUsername);
        if (profileImage != null) {
            // convert raw image bytes to base64 so it can be displayed in the html
            String base64Image = Base64.getEncoder().encodeToString(profileImage);
            request.setAttribute("base64ProfileImage", base64Image);
        }
        
        // get the action parameter
        String action = request.getParameter("action");
        // if the action is follow
        if ("follow".equalsIgnoreCase(action)) {
            // ensure the user is not trying to follow themself
            if (!profileUsername.equals(sessionUser.getUsername())) {
                // add the following to the following table
                FollowingModel.addFollower(sessionUser, user);
                request.setAttribute("message", "Follow successful!");
            } else {
                request.setAttribute("message", "You cannot follow yourself.");
            }
        } else if ("unfollow".equalsIgnoreCase(action) &&
                FollowingModel.isFollowing(sessionUser, user)) {
            // ensure the user is not trying to un follow themself
            if (!profileUsername.equals(sessionUser.getUsername())) {
                // remove the following from the following table
                FollowingModel.unFollow(sessionUser, user);
                request.setAttribute("message", "Unfollow successful!");
            } else {
                request.setAttribute("message", "You cannot unfollow yourself.");
            }
        }
        
        // send whether or not the session user is following the user to the jsp
        boolean isFollowing = FollowingModel.isFollowing(sessionUser, user);
        request.setAttribute("isFollowing", isFollowing);

        
        // create an array of all the posts
        ArrayList<Post> allPosts = PostModel.getAllPosts();
        // create an empty array to store only the posts belonging to that profile
        ArrayList<Post> profilePosts = new ArrayList<>();
        
        // loop through the posts
        for (Post post : allPosts) {
            // if the post's user id matches the user id of the profile we are looking at
            if (post.getUserId() == user.getId()) {
                // add the post to the filtered posts array
                profilePosts.add(post);
            }
            // get each post image as an array of bytes
            // this code generated by google search
            byte[] postImage = PostModel.getPostImage(post.getId()); 
            
            if (postImage != null) {
                // convert raw image bytes to base64 so it can be displayed in the html
                String base64PostImage = Base64.getEncoder().encodeToString(postImage);
                post.setBase64postImage(base64PostImage); 
            }
        }
    
        // send the attributes to the jsp
        request.setAttribute("profilePosts", profilePosts);
        request.setAttribute("filename", user.getFilename());
        request.setAttribute("profileUsername", profileUsername);
        request.setAttribute("profileImage", profileImage); 
        
        String url = "/views/profile.jsp";
        getServletContext().getRequestDispatcher(url).forward(request, response);

    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
