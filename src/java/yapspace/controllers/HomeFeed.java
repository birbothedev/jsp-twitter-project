
package yapspace.controllers;
import yapspace.User;
import yapspace.Post;
import yapspace.models.PostModel;
import yapspace.models.FollowingModel;

import java.io.IOException;
import java.io.InputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.sql.*;
import java.util.ArrayList;
import java.util.Base64;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.Part;

@MultipartConfig(maxFileSize = 1000000)
public class HomeFeed extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        // ensure user is logged in before proceeding
        if (!Login.ensureLoggedIn(request)){
            request.setAttribute("message", "you must login");
            response.sendRedirect("Login");
            return;
        }
        
        //get the session user
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        int userID = user.getId();

        // if user is adding a post
        if (action != null && action.equalsIgnoreCase("addPost")){
            //get all input fields from the post
            String text = request.getParameter("message");
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            Part filePart = request.getPart("postImage"); 
            // input stream represents an input of bytes
            InputStream inputStream = null;
            
            // if there is an image get its input stream
            if (filePart != null && filePart.getSize() > 0) {
                inputStream = filePart.getInputStream();
            }
            
            // if there is no text or no userID
            if (text.isEmpty() || userID == 0){
                request.setAttribute("error", "user id or text missing");
                String url = "/views/error.jsp";
                getServletContext().getRequestDispatcher(url).forward(request, response);
                return;
            }
            try {
                // create a new post and add it to the post table
                Post post = new Post(0, text, timestamp, userID);
                PostModel.addPost(post, inputStream);
                
                
                response.sendRedirect("HomeFeed");
                return;
            } catch (Exception ex){
                request.setAttribute("error", ex);
                String url = "/views/error.jsp";
                getServletContext().getRequestDispatcher(url).forward(request, response);
            }
        }
        
        // if user is liking a post
        if (action != null && action.equalsIgnoreCase("addLike")) {
            try {
                // get the id of the post
                int postId = Integer.parseInt(request.getParameter("postId"));
                // use the id to get the post and add a like to it
                Post likedPost = PostModel.getPostById(postId);
                if (likedPost != null) {
                    PostModel.addLikes(likedPost, 1);
                }
                // redirect to the same page to see updated like count
                response.sendRedirect("HomeFeed");
                return;
            } catch (Exception ex) {
                request.setAttribute("error", ex);
                String url = "/views/error.jsp";
                getServletContext().getRequestDispatcher(url).forward(request, response);
            }
        }
        
        // create an array of the userIDs followed by the logged in user
        ArrayList<Integer> followedUserIds = FollowingModel.getWhoUserIsFollowing(user);
        // create an array of all the posts
        ArrayList<Post> allPosts = PostModel.getAllPosts();

        ArrayList<Post> filteredPosts = new ArrayList<>();
        for (Post post : allPosts) {
            // if the post user id is in the list of the userIDs followed by the logged in user
            if (followedUserIds.contains(post.getUserId())) {
                // add it to the filtered posts array
                filteredPosts.add(post);
            }
        }

        // loop through filtered posts array
        for (Post eachPost : filteredPosts){
            String username = PostModel.getUsername(eachPost);
            // set the username of who created each post (so it can be displayed)
            eachPost.setUsername(username);
            
            // get each post image as an array of bytes
            // this code generated by google search
            byte[] postImage = PostModel.getPostImage(eachPost.getId()); 
            if (postImage != null) {
                // convert raw image bytes to base64 so it can be displayed in the html
                String base64PostImage = Base64.getEncoder().encodeToString(postImage);
                eachPost.setBase64postImage(base64PostImage); 
            }
        }
        
        // send the attributes to the jsp
        request.setAttribute("posts", filteredPosts);

        String url = "/views/homeFeed.jsp";
        getServletContext().getRequestDispatcher(url).forward(request, response);

    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
